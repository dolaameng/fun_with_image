library(rattle)
install.packages('kernlab')
install.packages('kernlab')
install.packages('kernlab')
library(kernlab)
library(rattle)
str(weather)
vars <- -grep("^(Date|Location|RISK)", names(weather))
test <- sample(1:nrow(weather), nrow(weather)/5)
weather.ksvm <- ksvm(RainTomorrow ~ ., data = weather[-test, vars], kernel='rbfdot', type = 'C-svc', prob.model = T)
plot(weather.ksvm)
plot(weather.ksvm)
print(weather.ksvm)
predictions <- predict(weather.ksvm, newdata = weather[test, vars], type='class')
predictions <- predict(weather.ksvm, newdata = weather[test, vars], type='decision')
head(predictions)
predictions <- predict(weather.ksvm, newdata = weather[test, vars], type='votes')
head(predictions)
table(predictions, weather[test, 'RainTomorrow'])
dim(predictions)
predictions <- predict(weather.ksvm, newdata = weather[test, vars], type='response')
head(predictions)
predictions <- predict(weather.ksvm, newdata = weather[test, vars], type='response')
table(predictions, weather[test, 'RainTomorrow'])
dim(predictions)
predictions
length(predictions)
length(test)
table(predictions, na.omit(weather[test, 'RainTomorrow']))
nrow(na.omit(weather[test, 'RainTomorrow']))
length(na.omit(weather[test, 'RainTomorrow']))
summary(weather[test, 'RainTomorrow'])
predictions <- predict(weather.ksvm, newdata = weather[test, vars], type='response')
summary(predictions)
?ksvm.predict
?predict.ksvm
print(weather.ksvm)
predictions <- predict(ksvm, newdata = weather[test, vars], type='response')
predictions <- predict(weather.ksvm, newdata = weather[test, vars], type='response')
table(predictions)
predictions <- predict(weather.ksvm, newdata = weather[test, vars], type='response')
predictions <- predict(weather.ksvm, newdata = weather[test, vars], type='votes')
summary(predictions)
summary(weather[test, vars])
weather.ksvm <- ksvm(RainTomorrow ~ ., data = weather[-test, vars], type='C-svc', kernel = 'rbfdot')
print(weather.ksvm)
predictions <- predict(weather.ksvm, newdata = weather[test, vars], type = 'response')
table(predictions)
table(predictions, na.omit(weather[test, ])[, vars])
test.weather <- na.omit(weather[test, ])
dim(test.weather)
table(predictions, na.omit(weather[test, ])[, 'RainTomorrow'])
weather.ksvm <- ksvm(RainTomorrow ~ ., data = weather[-test, vars], type='C-svc', kernel = 'rbfdot', cross = 3)
print(weather.ksvm)
predictions <- predict(weather.ksvm, newdata = weather[test, vars])
predictions <- predict(weather.ksvm, newdata = weather[test, vars], type='response')
table(predictions, na.omit(weather[test, ])[, 'RainTomorrow'])
sigest(weather[train, vars])
sigest(weather[-test, vars])
sigtest(weather[-test, vars])
sigtest(RainTomorrow ~ ., weather[-test, vars])
sigest(RainTomorrow ~ ., weather[-test, vars])
library(ROCR)
?performance
pred <- prediction(predictions, na.omit(weather[test, ])[, 'RainTomorrow'])
str(predictions)
table(predictions, na.omit(weather[test, ])[, 'RainTomorrow'])
summary(predictions)
pred <- prediction(list(predictions), na.omit(weather[test, ])[, 'RainTomorrow'])
pred <- prediction(as.numeric(predictions), na.omit(weather[test, ])[, 'RainTomorrow'])
summary(pred)
str(pred)
mode(predictions)
mode(weather[, 'RainTomorrow'])
typeof(predictions)
typeof(weather$RainTomorrow)
class(predictions)
class(weather$RainTomorrow)
performance(pred, 'tpr, fpr')
performance(pred, 'tpr', 'fpr')
perf <- performance(pred, 'tpr', 'fpr')
plot(perf)
performance(pred, 'auc')
performance(pred, 'acc')
performance(pred, 'tpr', 'fpr')
install.packages('doParallel')
install.packages('doMC')
install.packages('doSnow')
install.packages('doSNOW')
update.packages()
library('doParallel')
registerDoParallel(cores=3)
foreach(i = 1: 3, .inorder=F) %dopar% {i}
foreach(i = 1: 3, .inorder=F, .c='c') %dopar% {i}
foreach(i = 1: 3, .inorder=F, .combine='c') %dopar% {i}
foreach(i = 1: 3, .inorder=F, .combine='c') %dopar% {Sys.sleep(i*3); i}
foreach(i = 1: 10, .inorder=F, .combine='c') %dopar% {Sys.sleep(i*3); i}
library('doMC')
registerDoMC(cores = 3)
getDoParRegistered()
getDoParName()
foreach(i = 1: 10, .inorder=F, .combine='c') %dopar% {Sys.sleep(i*3); i}
update.packages()
library('rimage')
install.packages('rimage')
library('RImageJ')
library('rimage')
install.packages('RImageJ')
setwd("~/workspace/x/images/R")
library(ReadImages)
library(reshape)
library(ggplot2)
help(package = 'ReadImage')
help(package = 'ReadImages')
?melt
## read image
nasa <- read.jpeg('nasa.jpg')
str(nasa)
dim(nasa)
nasa <- melt(nasa)
dim(nasa)
str(nasa)
nasa <- reshape(nasa, timevar = 'x3', idvar = c('x1', 'x2'), direction = 'wide')
dim(nasa)
nasa <- reshape(nasa, timevar = 'X3', idvar = c('X1', 'X2'), direction = 'wide')
dim(nasa)
str(nasa)
sand <- with(nasa, nasa[X2 > 1000 & X1 > -300, ])
dim(sand)
summary(nasa)
sandOnly <- sand
with(sandOnly, plot(X2, X1, col = rgb(sandOnly[, 3:5]), asp = 1, pch = "."))
library(ReadImages)
library(reshape)
library(ggplot2)
## read image - image matrix
nasa <- read.jpeg('curiosity.jpg')
dim(nasa)
## reshape data by melting
nasa <- melt(nasa)
dim(nasa)
## get the RGB image - coordinates in X1, X2 and r, g, b values in 1, 2, 3
nasa <- reshape(nasa, timevar = 'X3', idvar = c('X1', 'X2'), direction = 'wide')
dim(nasa)
## look at the region of sand
sand <- with(nasa, nasa[X2 > 1000 & X1 > -300, ])
dim(sand)
with(sandOnly, plot(X2, X1, col = rgb(sandOnly[, 3:5]), asp = 1, pch = "."))
library(ReadImages)
library(reshape)
library(ggplot2)
## read image - image matrix
nasa <- read.jpeg('nasa')
dim(nasa)
## reshape data by melting
nasa <- melt(nasa)
dim(nasa)
## get the RGB image - coordinates in X1, X2 and r, g, b values in 1, 2, 3
nasa <- reshape(nasa, timevar = 'X3', idvar = c('X1', 'X2'), direction = 'wide')
dim(nasa)
## look at the region of sand
sand <- with(nasa, nasa[X2 > 1000 & X1 > -300, ])
dim(sand)
rm(list = ls())
library(ReadImages)
library(reshape)
library(ggplot2)
## read image - image matrix
nasa <- read.jpeg('nasa')
dim(nasa)
## reshape data by melting
nasa <- melt(nasa)
dim(nasa)
## get the RGB image - coordinates in X1, X2 and r, g, b values in 1, 2, 3
nasa <- reshape(nasa, timevar = 'X3', idvar = c('X1', 'X2'), direction = 'wide')
dim(nasa)
## look at the region of sand
sand <- with(nasa, nasa[X2 > 1000 & X1 > -300, ])
dim(sand)
source('~/workspace/x/images/R/nasa_bright.R')
source('~/workspace/x/images/R/nasa_bright.R')
summary(nasa)
rbgImage <- nasa
with(rgbImage, plot(X2, X1, col = rgb(rgbImage[, 3:5]), asp = 1, pch = "."))
rgbImage <- nasa
with(rgbImage, plot(X2, X1, col = rgb(rgbImage[, 3:5]), asp = 1, pch = "."))
source('~/workspace/x/images/R/nasa_bright.R')
summary(nasa)
rgbImage <- nasa
with(rgbImage, plot(X2, X1, col = rgb(rgbImage[, 3:5]), asp = 1, pch = "."))
sand.mean <- apply(sand[, 3:5], 2, mean)
sand.sd <- apply(sand[, 3:5], 2, sd)
print(sand.mean)
print(sand.sd)
colorz <- sweep(nasa[, 3:5], 2, sand.mean, "-")
colorz <- sweep(colorz, 2, sand.sd, '/')
summary(colorz)
plot(density(rowSums(colorz)))
?rowSum
?rowSums
aa <- rowSums(colorz)
summary(aa)
length(aa)
709 * 345
dim(colorz)
dim(sand)
sandOnly <- sand
with(sandOnly, plot(X2, X1, col = rgb(sandOnly[, 3:5]), asp = 1, pch = "."))
300 * 345
summary(colroz)
summary(colorz)
summary(rowSums(colorz))
plot(density(rowSums(colorz)))
